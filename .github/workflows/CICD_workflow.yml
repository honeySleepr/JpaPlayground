name: CI/CD

on:
  push:
    branches:
      - CD
  pull_request_target:
    types:
      - closed
    branches:
      - main

jobs:
  job1:
    if: github.ref == 'refs/heads/CD' || github.event.pull_request.merged == true # pr close 후 정상 merge 된 경우에만 job 실행
    name: 1.Build & Test Jar
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Swap environment variables
        working-directory: ./src/main/resources
        run: |
          echo "${{ secrets.AUTH_PROD_YML }}" >> ./auth.yml
          echo "${{ secrets.ENV_PROD_YML }}" >> ./env.yml
          echo "${{ secrets.APPLICATION_PROD_YML }}" >> ./application-prod.yml

      # https://github.com/actions/cache/blob/main/examples.md#java---gradle
      - name: gradle dependency caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Docker compose
        run: |
          export MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}  
          docker compose up -d

      - name: Wait for mysql
        run: |
          docker ps
          while ! docker exec carrot_mysql mysql --user=root --password=${{ secrets.MYSQL_ROOT_PASSWORD }} -e "SELECT 1" >/dev/null 2>&1;
          do
              sleep 2
              echo "waiting for mysql.."
          done

      - name: Test with Gradle
        run: MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} ./gradlew build

        # 다음 job으로 전달하기 위해 jar 파일 임시 저장
      - name: Create artifact(jar)
        uses: actions/upload-artifact@v3
        with:
          name: jar_file
          path: ./build/libs

  # ----------------------------------------------------------------------------
  job2:
    needs: job1
    name: 2.Build & Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout to current branch
        uses: actions/checkout@v3

      # job1에서 만든 artifact 꺼내서 사용
      - name: Get artifact
        uses: actions/download-artifact@v3
        with:
          name: jar_file
          path: ./build/libs

      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: gruzzimo/carrot:latest

  # ----------------------------------------------------------------------------
  job3:
    needs: job2
    name: 3. Deploy to AWS EC2
    runs-on: ubuntu-latest
    
    steps:
      # https://github.com/marketplace/actions/ssh-remote-commands
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PUBLIC_EC2_IP }}
          username: ubuntu
          key: ${{ secrets.PUBLIC_EC2_SSH_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/carrot:latest
            sudo docker stop $(sudo docker ps -a -q) || true
            sudo docker system prune -f
            sudo docker run -d -p 80:8080 -e REDIS_PORT=1111 -e REDIS_HOST_IP=10.0.10.121 --name carrot ${{ secrets.DOCKERHUB_USERNAME }}/carrot:latest
            
            # 서버 health check. 일정 시간내로 서버가 뜨지 않으면 action 강제 종료 (email로 실패 결과가 자동으로 전달됨)
            TIMER=60
            while [[ ! $(curl -s "http://${{ secrets.PUBLIC_EC2_IP }}/actuator/health" | grep "UP") && TIMER -gt 0 ]];
            do
              sleep 5
              echo "Waiting for Spring Boot.."
              let TIMER-=5
            done
            
            if [ $TIMER -eq 0 ];
            then
              echo "HEALTH CHECK FAILED"
              exit 1
            else
              echo "SUCCESS"
            fi
